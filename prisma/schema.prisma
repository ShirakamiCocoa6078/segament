// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. 데이터 소스 및 클라이언트 생성기 설정
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 2. NextAuth.js 호환 모델
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // [추가] 사용자의 고유 API 키. 이 키는 null일 수 있으며, DB에서 유일해야 합니다.
  apiKey        String?   @unique

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  gameProfiles GameProfile[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 3. Segament 통합 모델

// [변경] 여러 게임과 지역의 프로필 정보를 담는 통합 모델
model GameProfile {
  id            String    @id @default(cuid())
  userId        String
  gameType      String    // "CHUNITHM", "MAIMAI", "ONGEKI"
  region        String    // "JP", "INTL"

  playerName    String
  rating        Float     @default(0)
  overPower     Float     @default(0)
  title         String?
  character     String?
  playCount     Int       @default(0)
  firstPlayDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlogs  GamePlaylog[]
  ratinglogs GameRatingLog[]

  // 한 유저가 특정 게임의 특정 지역 프로필을 하나만 갖도록 보장
  @@unique([userId, gameType, region])
}

// [변경] 여러 게임의 플레이로그를 담는 통합 모델
model GamePlaylog {
  profileId   String
  musicId     String
  difficulty  String
  score       Int      @default(0)
  rank        String?
  isAllJustice Boolean @default(false)
  isFullCombo  Boolean @default(false)

  profile GameProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, musicId, difficulty])
}

// [변경] 여러 게임의 레이팅 로그를 담는 통합 모델
model GameRatingLog {
  id        String   @id @default(cuid())
  profileId String
  rating    Float
  changedAt DateTime @default(now())

  profile GameProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}