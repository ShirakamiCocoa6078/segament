// 파일 경로: prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  gameProfiles GameProfile[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GameProfile {
  id            String    @id @default(cuid())
  userId        String
  gameType      String
  region        String

  playerName    String
  rating        Float     @default(0)
  overPower     Float     @default(0)
  title         String?
  character     String?
  playCount     Int       @default(0)
  firstPlayDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlogs  GamePlaylog[]
  ratinglogs GameRatingLog[]

  @@unique([userId, gameType, region])
}

model GamePlaylog {
  profileId   String
  musicId     String
  difficulty  String
  score       Int      @default(0)
  
  // [추가] 상세 데이터를 저장하기 위한 필드들
  rank                  String?
  clearType             String?
  isFullCombo           Boolean @default(false)
  isAllJustice          Boolean @default(false)
  isAllJusticeCritical  Boolean @default(false)
  fullChainType         Int     @default(0) // 0: 없음, 1: Gold, 2: Platinum

  profile GameProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, musicId, difficulty])
}

model GameRatingLog {
  id        String   @id @default(cuid())
  profileId String
  rating    Float
  changedAt DateTime @default(now())

  profile GameProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}