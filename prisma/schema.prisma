// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. 데이터 소스 및 클라이언트 생성기 설정
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


// 2. NextAuth.js 호환 모델
// 사용자의 기본 계정 정보. 모든 게임 프로필의 시작점.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 관계 설정
  accounts         Account[]
  sessions         Session[]
  ChunithmProfile  ChunithmProfile?
  MaimaiProfile    MaimaiProfile?
  OngekiProfile    OngekiProfile?
}

// 소셜 로그인 등 OAuth 계정 정보
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// 사용자 로그인 세션 정보
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 이메일 인증 등에서 사용하는 임시 토큰
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// 3. Segament 고유 모델
// 게임별 프로필, 플레이로그, 레이팅로그를 정의

// ======== CHUNITHM 관련 모델 ========
model ChunithmProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  playerName    String
  rating        Float     @default(0)
  overPower     Float     @default(0)
  title         String?
  character     String?
  playCount     Int       @default(0)
  firstPlayDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 관계 설정
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlogs  ChunithmPlaylog[]
  ratinglogs ChunithmRatingLog[]
}

model ChunithmPlaylog {
  profileId   String
  musicId     String   // segament-data-updater에서 생성하는 고유 ID
  difficulty  String   // 'BAS', 'ADV', 'EXP', 'MAS', 'ULT'
  score       Int      @default(0)
  rank        String?
  isAllJustice Boolean @default(false)
  isFullCombo  Boolean @default(false)
  
  // 관계 설정
  profile ChunithmProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // 복합 기본 키 설정: 한 유저가 특정 곡의 특정 난이도에 대해 하나의 기록만 갖도록 보장
  @@id([profileId, musicId, difficulty])
}

model ChunithmRatingLog {
  id        String   @id @default(cuid())
  profileId String
  rating    Float
  changedAt DateTime @default(now())

  // 관계 설정
  profile ChunithmProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  // 인덱스 설정: 특정 유저의 레이팅 기록을 빠르게 조회하기 위함
  @@index([profileId])
}


// ======== MAIMAI 관련 모델 (미래 확장용) ========
model MaimaiProfile {
  id            String @id @default(cuid())
  userId        String @unique
  // ... (MAIMAI 프로필 관련 필드 추가 예정)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ======== ONGEKI 관련 모델 (미래 확장용) ========
model OngekiProfile {
  id            String @id @default(cuid())
  userId        String @unique
  // ... (ONGEKI 프로필 관련 필드 추가 예정)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}