// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- 기본 사용자 모델 ---
// userProfile 데이터를 포함합니다.
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?

  // --- userProfile 데이터 ---
  username       String?   @unique
  avatarUrl      String?
  lastJoin       DateTime?
  lastUpdateData DateTime?

  // --- 관계 및 인증용 모델 ---
  accounts        Account[]
  sessions        Session[]
  chunithmProfile ChunithmProfile?
}

// --- NextAuth 관련 모델 ---
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// ==========================================
//        CHUNITHM 관련 모델
// ==========================================

// --- chunithmData를 관리하는 메인 프로필 ---
model ChunithmProfile {
  id             String    @id @default(cuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt      DateTime  @updatedAt

  rating         Float
  playCount      Int
  title          String[]
  courseResult   String?
  allCourseClear String?

  character     ChunithmCharacter?
  records       ChunithmRecord[]
  ratingHistory ChunithmRatingHistory[]
}

// --- chunithmData.avatarLevel.chunithm ---
model ChunithmCharacter {
  id        String  @id @default(cuid())
  profileId String  @unique
  profile   ChunithmProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  name      String
  level     Int
}

// --- chunithmData.recentPlays ---
model ChunithmRecord {
  id        String   @id @default(cuid())
  profileId String
  profile   ChunithmProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  song      String
  score     Int
  rank      String
  constant  Float
  isNew     Boolean  // ✨ isNew: true/false 필드 추가
  playedAt  DateTime @default(now())
}

// --- chunithmData.ratingHistory ---
model ChunithmRatingHistory {
  id         String   @id @default(cuid())
  profileId  String
  profile    ChunithmProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  name       String
  rating     Float
  recordedAt DateTime @default(now())
}